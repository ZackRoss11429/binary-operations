def booleanType():
    def AND():  # Will return true only if all boolean values are TRUE/1
        if booleanvalues.count("TRUE") + booleanvalues.count("1") == len(booleanvalues):
            print("When " + str(booleanvalues) + " is ran through an AND gate, it returns TRUE")

        else:
            print("When " + str(booleanvalues) + " is ran through an AND gate, it returns FALSE")

    def OR():  # Will return true if at least one of the boolean values are TRUE/1
        if booleanvalues.count("TRUE") + booleanvalues.count("1") > 0:
            print("When " + str(booleanvalues) + " is ran through the OR gate, it returns TRUE")

        else:
            print("When " + str(booleanvalues) + " is ran through the OR gate, it returns FALSE")

    def XOR():  # Will return true only if at least 1 boolean value is TRUE/1 but not all of them
        if (booleanvalues.count("TRUE") + booleanvalues.count("1")) < len(booleanvalues):
            print("When " + str(booleanvalues) + " is ran through the XOR gate, it returns TRUE")

        else:
            print("When " + str(booleanvalues) + " is ran through the XOR gate, it returns FALSE")

    def NOR():  # Will return true only if no values are TRUE/1
        if booleanvalues.count("FALSE") + booleanvalues.count("0") == len(booleanvalues):
            print("When " + str(booleanvalues) + " is ran through the NOR gate, it returns TRUE")

        else:
            print("When " + str(booleanvalues) + " is ran through the NOR gate, it returns FALSE")

    def XNOR():  # Will return true only if both values are TRUE/1 or FALSE/0
        if booleanvalues.count("TRUE") + booleanvalues.count("1") == len(booleanvalues) \
                or booleanvalues.count("FALSE") + booleanvalues.count("0") == len(booleanvalues):
            print("When " + str(booleanvalues) + " is ran through the XNOR gate, it returns TRUE")

        else:
            print("When " + str(booleanvalues) + " is ran through the XNOR gate, it returns FALSE")

    booleanvalues = []  # Contains all the inputted boolean values to be calculated
    valuelist = ["TRUE", "FALSE", "1", "0"]  # Contains all the valid boolean values the user can input
    operationlist = ["AND", "OR", "NOT", "XOR", "NOR", "XNOR"]  # Contains all the valid operations a user can use

    while True:  # Loops requesting the user what operation they want. It will loop only if they request an invalid operation
        operationchoice = input("Choose an operation: AND, OR, XOR, XNOR or NOR\n")
        if operationchoice.upper() in operationlist:  # Breaks the loop if the user requests a valid operation
            break
        else:
            print("That's not a valid operation.")

    # Asks the user for which boolean operation they wish to use
    i = 1  # counter variable for the loop that ask
    while True:  # Runs until user has inputted all their desired boolean values as long as there's >1 value inputted
        booleans = input("Input a boolean value (TRUE/FALSE)\n or STOP if submitted more than 2 values: \n")
        i += 1
        if booleans.upper() == "STOP" and i < 3:
            print("Please input at least TWO boolean values")
        elif booleans.upper() == "STOP" and i > 3:
            break
        elif booleans.upper() not in valuelist:
            print("That is not a valid boolean value or stop request")
        else:
            booleanvalues.append(booleans)
            print(booleanvalues)
    # Conditionals above ensure the user has inputted a valid boolean value
    # Or has finished inputting the boolean values they want, so long as they've inputted >1 value

    eval(operationchoice.upper() + "()")
    # Will detect which operation the user has requested and runs the correct function


def listType():  # this works similarly but it works where the user inputs a string containing multiple arguments
    # example: 1 AND 0 AND 0 OR 1 XNOR 1
    def AND(statement1, statement2):  # AND gate, if both values passed through are 1, it returns 1. Else 0
        if statement1 == 1 and statement2 == 1:
            return '1'
        else:
            return '0'

    def OR(statement1, statement2):  # OR gate, if at least one value passed through is 1, it returns 1. Else 0
        if statement1 != 0 and statement2 != 0:
            return '1'
        else:
            return '0'

    def XOR(statement1, statement2):  # OR gate, if only one value passed through is 1, it returns 1. Else 0
        if statement1 != statement2:
            return '1'
        else:
            return '0'

    def NOR(statement1, statement2):  # NOR gate, if both values passed through are 0, it returns 1. Else 0
        if statement1 == 0 and statement2 == 0:
            return '1'
        else:
            return '0'

    def XNOR(statement1, statement2):  # XNOR gate, if both values passed through are 1 or 0, it returns 1. Else 0
        if statement1 == statement2:
            return '1'
        else:
            return '0'

    while True:  # Loops requesting the user what operation they want. It will loop only if they request an invalid operation
        operationlist = ['AND', 'OR', 'XOR', 'NOR', 'XNOR']  # valid operations the user can input
        operationchoice = input(
            "Write your boolean argument (example '1 AND 0 OR 1 XOR 1 NOT 1')\n(Possible arguments: " + ', '.join(
                operationlist) + ")\n")

        if len(operationchoice) < 3 or len(operationchoice) % 2 == 0:
            print("You haven't written your argument with at least two values and one argument")
            # error checks if input contains less than 1 argument and 2 bits (and 2 bits per argument)

        if not any(y in operationchoice for y in operationlist):
            print("You haven't inputted any / the correct arguments (AND, OR, NOT, XOR, NOR, XNOR")
            # error checks if user input contains only valid arguments

        if not any(z in operationchoice for z in ("0", "1")):
            print("You must be passing through binary values, ie 1 or 0")
            # error checks if user input only contains binary bits (0, 1)

        operation = operationchoice.upper().split()
        # splits up each word of the user input into a list
        tally = []  # final list that is
        for i in range(0, len(operation) // 2):  # repeats the following as many times as there are arguments
            try:
                tally.append(eval(operation[1].upper() + "(" + operation[0] + ", " + operation[2] + ")"))
            # tries to pass the first and third values of the operations list through the argument function said in
            # the second value of the operations list (0 OR 1 will pass 0 and 1 through the OR function). It will then
            # append what returns to the tally list.

            except IndexError:
                print(
                    "Please ensure you're providing at least two values and an argument (example: '1 and 0 and 1 or 1')")
                # if the user invalidly inputs (ie saying AND 1 OR 1) then it will stop them from doing it

            finally:
                if len(operation) > 3:
                    del operation[0]
                    del operation[0]
                    print(operation)
            # this piece of code executes if there was no IndexError exception. It will check if the operations list
            # is longer than 3 words (ie 1 AND 0 OR 1 will execute but 1 XOR 0 won't) and then delete the first two
            # values of the operation list, so it can move on to the next argument (so 1 OR 0 AND 1 will become 1 AND 1
            # as 1 OR 0 returns 1)
            
        print(''.join(tally))  # this prints the final calculation (example: 1 AND 1 OR 1 XOR 1 will return 110)
        break


while True:
    binaryboolean = input("Choose whether you want to calculate with BOOLEAN or LIST\n")
    if binaryboolean.upper() == "BOOLEAN":
        booleanType()

    elif binaryboolean.upper() == "LIST":
        listType()

    else:
        print("That is an invalid decision.")
    # this piece of code is the first thing to execute. It asks for the user to input whether they want to use the 
    # boolean operation function or the list operation function. If the user inputs an invalid function name, it will
    # ask them to input a valid function.
    
